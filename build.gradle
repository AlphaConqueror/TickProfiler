buildscript {
	repositories {
		mavenCentral()
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
		maven { url = 'https://maven.minecraftforge.net/' }
		maven { url = 'https://plugins.gradle.org/m2/' }
		maven { url = "https://files.minecraftforge.net/maven" }
	}
	dependencies {
		classpath('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
			changing = true
		}
		classpath 'org.spongepowered:mixingradle:0.4-SNAPSHOT'
		classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
	}
}

plugins {
	id 'java'
}

apply plugin: 'maven'
apply plugin: 'forge'

configurations {
    bundledLibs
    compile {
        extendsFrom bundledLibs
    }
}

repositories {
    maven { url = 'http://repo.nallar.me/' }
}

dependencies {
//    compile 'com.github.stephenc.high-scale-lib:high-scale-lib:1.1.4'
    bundledLibs 'me.nallar:ModPatcher:1.7.10-SNAPSHOT'
    bundledLibs 'org.codehaus.jackson:jackson-core-lgpl:1.9.13'
    bundledLibs 'org.codehaus.jackson:jackson-mapper-lgpl:1.9.13'
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7
version = "1.7.10.${System.env.BUILD_NUMBER}"
ext.mcVersion = "1.7.10"
ext.forgeVersion = "10.13.0.1208"
group = "nallar.tickprofiler" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TickProfiler"

def calculateVersion() {
    def ver = project.mcVersion
    if (System.env.BUILD_NUMBER != null)
        return ver + ".jenkins." + System.env.BUILD_NUMBER
    if (project.hasProperty("release"))
        return ver + '.' + project.release
    return ver + ".dev"
}


version = calculateVersion()

minecraft {
    version = "${project.mcVersion}-${project.forgeVersion}"
    runDir = "run"

    replace "@MOD_VERSION@", project.version
    replace "@MC_VERSION@", version
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) { exclude 'mcmod.info' }
}

jar {
    from(configurations.bundledLibs.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/**"
    }

    manifest.mainAttributes("FMLCorePlugin": "nallar.tickprofiler.minecraft.CoreMod", "FMLCorePluginContainsFMLMod": "YasPlease")
}
